psych_test <- c(13, 14, 7, 12, 10, 6, 8, 15 4, 14, 9, 6, 10, 12, 5, 12, 8, 8, 12, 15)
xx <- c(1,1,1)
psych_test <- c(13,14,7,12,10,6,8,15,4, 14, 9, 6, 10, 12, 5, 12, 8, 8, 12, 15)
psych_test <- c(13, 14, 7, 12, 10, 6, 8, 15, 4, 14, 9, 6, 10, 12, 5, 12, 8, 8, 12, 15)
hist(psych_test)
sum(psych_test)
sum(psych_test)/length(psych_test)
mean(psych_test)
table(psych_test)
median(psych_test)
avg <- mean(psych_test)
avg
deviation <- psych_test - avg
deviation
sqr_deviation <- deviation ^ 2
sqr_deviation
sum_sqr_deviation <- sum(sqr_deviation)
sum_sqr_deviation
dispersion <- sum_sqr_deviation / length(psych_test)
dispersion
sqrt(dispersion)
var(psych_test)
sum_sqr_deviation / length(psych_test) - 1
sum_sqr_deviation / (length(psych_test) - 1)
sqrt(sum_sqr_deviation / (length(psych_test) - 1))
sd(psych_test)
source('~/Documents/studyR/study01.R', echo=TRUE)
psych_test
mean(psych_test)
psych_test - mean(psych_test)
abs(psych_test - mean(psych_test))
mean(abs(psych_test - mean(psych_test)))
psych_sd <- sqrt(mean((psych_test -  mean(psych_test)) ^ 2))
z-score <- (psych_test - mean(psych_test)) / psych_sd
z_score <- (psych_test - mean(psych_test)) / psych_sd
z_score
mean(z_score)
sqrt(mean((z_score - mean(z_score)) ^ 2))
A <- c(60, 100, 50, 40, 50, 230, 120, 240, 200, 30)
B <- c(50, 60, 40, 50, 100, 80, 30, 20, 100, 120)
hist(A)
hist(B)
mean(A)
sd(A)
mean(B)
sd(B)
z_A <- (A - mean(A)) / sd(A)
z_B <- (B - mean(B)) / sd(B)
z_A
z_B
sd(z_A)
sd(z_B)
hist(z_A)
hist(z_B)
stc_test1 <- c(6, 10, 6, 10, 5, 3, 5, 9, 3, 3, 11, 6, 11, 9, 7, 5, 8, 7, 7, 9)
stc_test2 <- c(10, 13, 8, 15, 8, 6, 9, 10, 7, 3, 18, 14, 18, 11, 12, 5, 7, 12, 7, 7)
plot(stc_test1, stc_test2)
plot(psych_test, stc_test1)
plot(psych_test, stc_test2)
cov(stc_test1, stc_test2)
cor(stc_test1, stc_test2)
cor(stc_test1, stc_test2)
cor(psych_test, stc_test1)
cor(psych_test, stc_test2)
stcs <- c("D", "D", "D", "L", "L", "D", "L", "L", "L", "L", "D", "L")
math <- c("L", "D", "D", "L", "L", "D", "D", "D", "L", "D", "L", "L")
table(math)
table(stcs)
table(math, stcs)
math10 <- ifelse(math=="L", 1, 0)
stcs10 <- ifelse(stcs=="L", 1, 0)
cor(math10, stcs10)
source('~/Documents/studyR/study01.R', echo=TRUE)
study_time <- c(1,3,10,12,6,3,8,4,1,5)
score <- c(20,40,100,80,50,50,70,50,10,60)
plot(study_time, score)
cor(study_time, score)
library(SPARQL)
install.packages("SPARQL")
library(SPARQL)
endpoint <- "http://ja.dbpedia.org/sparql"
query <- '
PFEFIX dbpja:<http://ja.dbpedia.org/property/>
PREFIX dcterms:<http://purl.org/terms/>
select
distinct ?movie ?director ?actor
where {
?m dcterms:subject <http://ja.dbpedia.org/resource/Category:日本の映画作品>
?m dbpja:監督 ?d .
?m dbpja:出演者 ?a .
?m rdfs:label ?movie .
?d rdfs:label ?director .
?a rdfs:label ?actor .
}
'
res <- SPARQL(endpoint, query)$results
query <- '
PREFIX dbpja:<http://ja.dbpedia.org/property/>
PREFIX dcterms:<http://purl.org/terms/>
select
distinct ?movie ?director ?actor
where {
?m dcterms:subject <http://ja.dbpedia.org/resource/Category:日本の映画作品>
?m dbpja:監督 ?d .
?m dbpja:出演者 ?a .
?m rdfs:label ?movie .
?d rdfs:label ?director .
?a rdfs:label ?actor .
}
'
res <- SPARQL(endpoint, query)$results
csv.re
csv.read("http://dyna.central-tanshifx.com/service/market/csv/01_USDJPY_D.csv")
csv.read("http://dyna.central-tanshifx.com/service/market/csv/01_USDJPY_D.csv")
read.csv("http://dyna.central-tanshifx.com/service/market/csv/01_USDJPY_D.csv")
setwd("~/dev/day14/")
setwd("~/dev/feg/day14/")
jpop <- read.csv("Jpop/Jpop.csv")
ans <- read.csv("Jpop/JpopAns.csv")
View(jpop)
View(jpop)
View(ans)
View(jpop)
View(ans)
View(jpop)
View(ans)
View(jpop)
View(jpop)
cl <- factor(c(rep("s",25), rep("c",25), rep("v",25)))
knn(jpop, ans, cl, k = 1, prob = FALSE, algorithm=c("kd_tree", "cover_tree", "brute"))
library(FNN)
install.packages("FNN")
library(FNN)
cl <- factor(c(rep("s",25), rep("c",25), rep("v",25)))
knn(jpop, ans, cl, k = 1, prob = FALSE, algorithm=c("kd_tree", "cover_tree", "brute"))
knn(jpop, ans, cl, k = 1, prob = FALSE, algorithm=c("kd_tree"))
jpop[1:5,]
jpop[1:4,]
jpop[5:8,]
test <- jpop[5:8,]
cl <- jpop$HHH
knn(train, test, cl, k = 1, prob = FALSE, algorithm=c("kd_tree", "cover_tree", "brute"))
knn(train, test, cl, k = 1, prob = FALSE, algorithm=c("kd_tree"))
train <- jpop[1:4,]
test <- jpop[5:8,]
cl <- jpop$HHH
knn(train, test, cl, k = 1, prob = FALSE, algorithm=c("kd_tree"))
knn(train, test, cl)
jpop$HHH
train <- jpop[1:4,]
train$HHH <- NULL
test <- jpop[5:8,]
test$HHH <- NULL
cl <- jpop$HHH[1:4,]
cl <- jpop$HHH[1:4]
knn(train, test, cl)
knn.reg(train, test, cl, k=2)
bank.fulldata <- read.csv("bank-full.csv", sep=";")
bank.fulldata <- read.csv("bank-full.csv", sep=";")
bank.bunseki <- bank.fulldata[1:39752, ]
bank.test <- bank.fulldata[39752:45211, ]
bank.test$y <- NULL
set.seed(12345)
trainnum <- sample(1:39752, 27826)
bank.train <- bank.bunseki[trainnum, ]
validnum <- sediff(1:39752, trainnum)
validnum <- setdiff(1:39752, trainnum)
bank.valid <- bank.bunseki[validnum, ]
library(randomForest)
bank.rf <- randomForest(y ~ age+job+martial+education+default, data=bank.train)
bank.rf <- randomForest(y ~ age + job + marital + education + default, data=bank.train)
train.prob <- predict(bank.rf, newdata=bank.train, type="prop")
bank.rf <- randomForest(y ~ age + job + marital + education + default, data=bank.train)
train.prob <- predict(bank.rf, newdata=bank.train, type="prop")
train.prob <- predict(bank.rf, newdata=bank.train, type="prob")
head(train.prob)
calcAR(x=train.prob[,2], y=bank.train$y, target="yes", plotCAP=TRUE, plotpr=TRUE)
source("~/dev/feg/day04/calcAR.R")
calcAR(x=train.prob[,2], y=bank.train$y, target="yes", plotCAP=TRUE, plotpr=TRUE)
calcAR(X=train.prob[,2], Y=bank.train$y, TARGET="yes", plotCAP=TRUE, plotpr=TRUE)
calcAR(X=train.prob[,2], y=bank.train$y, TARGET="yes", plotCAP=TRUE, plotpr=TRUE)
valid.prob <- predict(bank.rf, newdata=bank.valid, type="prob")
calcAR(X=valid.prob[,2], y=bank.valid$y, TARGET="yes", plotCAP=TRUE, plotpr=TRUE)
bank.rf <- randomForest(y ~ age + job + marital + education + default, data=bank.train, nodesize=100)
train.prob <- predict(bank.rf, newdata=bank.train, type="prob")
valid.prob <- predict(bank.rf, newdata=bank.valid, type="prob")
calcAR(X=train.prob[,2], y=bank.train$y, TARGET="yes", plotCAP=TRUE, plotpr=TRUE)
calcAR(X=valid.prob[,2], y=bank.valid$y, TARGET="yes", plotCAP=TRUE, plotpr=TRUE)
bank.rf <- randomForest(y ~ age + job + marital + education + default, data=bank.train, nodesize=1000)
train.prob <- predict(bank.rf, newdata=bank.train, type="prob")
valid.prob <- predict(bank.rf, newdata=bank.valid, type="prob")
calcAR(X=train.prob[,2], y=bank.train$y, TARGET="yes", plotCAP=TRUE, plotpr=TRUE)
calcAR(X=valid.prob[,2], y=bank.valid$y, TARGET="yes", plotCAP=TRUE, plotpr=TRUE)
bank.rf <- randomForest(y ~ age + job + marital + education + default, data=bank.train, nodesize=50)
train.prob <- predict(bank.rf, newdata=bank.train, type="prob")
valid.prob <- predict(bank.rf, newdata=bank.valid, type="prob")
calcAR(X=train.prob[,2], y=bank.train$y, TARGET="yes", plotCAP=TRUE, plotpr=TRUE)
calcAR(X=valid.prob[,2], y=bank.valid$y, TARGET="yes", plotCAP=TRUE, plotpr=TRUE)
tuneRF(train.prob[,2], bank.train$y, doBest=T)
tuneRF(bank.train, bank.train$y, doBest=T)
tuneRF(bank.train, bank.train$y, doBest=TRUE)
bank.rf <- randomForest(y ~ age + job + marital + education + default, data=bank.train, mtry=4)
train.prob <- predict(bank.rf, newdata=bank.train, type="prob")
valid.prob <- predict(bank.rf, newdata=bank.valid, type="prob")
calcAR(X=train.prob[,2], y=bank.train$y, TARGET="yes", plotCAP=TRUE, plotpr=TRUE)
calcAR(X=valid.prob[,2], y=bank.valid$y, TARGET="yes", plotCAP=TRUE, plotpr=TRUE)
bank.rf <- randomForest(y ~ age + job + marital + education + default, data=bank.train, mtry=4, nodesize=100)
train.prob <- predict(bank.rf, newdata=bank.train, type="prob")
valid.prob <- predict(bank.rf, newdata=bank.valid, type="prob")
calcAR(X=train.prob[,2], y=bank.train$y, TARGET="yes", plotCAP=TRUE, plotpr=TRUE)
calcAR(X=valid.prob[,2], y=bank.valid$y, TARGET="yes", plotCAP=TRUE, plotpr=TRUE)
bank.rf <- randomForest(y ~ age + job + marital + education + default, data=bank.train, mtry=4, nodesize=50)
train.prob <- predict(bank.rf, newdata=bank.train, type="prob")
valid.prob <- predict(bank.rf, newdata=bank.valid, type="prob")
calcAR(X=train.prob[,2], y=bank.train$y, TARGET="yes", plotCAP=TRUE, plotpr=TRUE)
calcAR(X=valid.prob[,2], y=bank.valid$y, TARGET="yes", plotCAP=TRUE, plotpr=TRUE)
bank.rf <- randomForest(y ~ age + job + marital + education + default, data=bank.train, ntree=10)
train.prob <- predict(bank.rf, newdata=bank.train, type="prob")
valid.prob <- predict(bank.rf, newdata=bank.valid, type="prob")
calcAR(X=train.prob[,2], y=bank.train$y, TARGET="yes", plotCAP=TRUE, plotpr=TRUE)
calcAR(X=valid.prob[,2], y=bank.valid$y, TARGET="yes", plotCAP=TRUE, plotpr=TRUE)
bank.rf <- randomForest(y ~ age + job + marital + education + default, data=bank.train, ntree=100)
train.prob <- predict(bank.rf, newdata=bank.train, type="prob")
valid.prob <- predict(bank.rf, newdata=bank.valid, type="prob")
calcAR(X=train.prob[,2], y=bank.train$y, TARGET="yes", plotCAP=TRUE, plotpr=TRUE)
calcAR(X=valid.prob[,2], y=bank.valid$y, TARGET="yes", plotCAP=TRUE, plotpr=TRUE)
bank.rf <- randomForest(y ~ age + job + marital + education + default, data=bank.train, ntree=1000)
train.prob <- predict(bank.rf, newdata=bank.train, type="prob")
valid.prob <- predict(bank.rf, newdata=bank.valid, type="prob")
calcAR(X=train.prob[,2], y=bank.train$y, TARGET="yes", plotCAP=TRUE, plotpr=TRUE)
calcAR(X=valid.prob[,2], y=bank.valid$y, TARGET="yes", plotCAP=TRUE, plotpr=TRUE)
bank.rf <- randomForest(y ~ age + job + marital + education + default, data=bank.train, ntree=5000)
train.prob <- predict(bank.rf, newdata=bank.train, type="prob")
valid.prob <- predict(bank.rf, newdata=bank.valid, type="prob")
calcAR(X=train.prob[,2], y=bank.train$y, TARGET="yes", plotCAP=TRUE, plotpr=TRUE)
calcAR(X=valid.prob[,2], y=bank.valid$y, TARGET="yes", plotCAP=TRUE, plotpr=TRUE)
